package dsp;

public class AntiAliasFilter {

  /*
   Remez LP filter based on 48 kHz sampling rate, 4 kHz passband,
   40 dB stopband attenuation and 0.1 dB passband ripple
  */

  double[] a = {
   3.5742351e-003, -2.4838233e-003, -1.9313679e-003, -1.5051885e-003,
  -1.0625298e-003, -5.4471089e-004,  1.9503208e-005,  5.3403711e-004,
   8.7524507e-004,  9.4153199e-004,  6.9692728e-004,  1.9507372e-004,
  -4.2544221e-004, -9.7642612e-004, -1.2752906e-003, -1.2036169e-003,
  -7.5084278e-004, -2.7603477e-005,  7.5974889e-004,  1.3676808e-003,
   1.5878965e-003,  1.3261571e-003,  6.1463451e-004, -3.3234027e-004,
  -1.2564374e-003, -1.8512086e-003, -1.8989544e-003, -1.3516945e-003,
  -3.4125872e-004,  8.4987528e-004,  1.8604129e-003,  2.3570369e-003,
   2.1445197e-003,  1.2396650e-003, -1.2011956e-004, -1.5367705e-003,
  -2.5669975e-003, -2.8592992e-003, -2.2710648e-003, -9.2714442e-004,
   8.0099037e-004,  2.3945436e-003,  3.3437559e-003,  3.3033060e-003,
   2.2236277e-003,  3.6813172e-004, -1.7268243e-003, -3.4199645e-003,
  -4.1536761e-003, -3.6297715e-003, -1.9278325e-003,  4.9524537e-004,
   2.9271396e-003,  4.6052167e-003,  4.9505709e-003,  3.7617884e-003,
   1.3067957e-003, -1.7300497e-003, -4.4346588e-003, -5.9341275e-003,
  -5.6723209e-003, -3.6061326e-003, -2.5518617e-004,  3.4216252e-003,
   6.2914520e-003,  7.3934679e-003,  6.2456991e-003,  3.0401048e-003,
  -1.3758811e-003, -5.7081531e-003, -8.5852100e-003, -8.9839454e-003,
  -6.5727215e-003, -1.8716291e-003,  3.8359148e-003,  8.8395771e-003,
   1.1496673e-002,  1.0749117e-002,  6.5029357e-003, -2.4963813e-004,
  -7.6318496e-003, -1.3374831e-002, -1.5477694e-002, -1.2851233e-002,
  -5.7528791e-003,  4.1345535e-003,  1.4045689e-002,  2.0830759e-002,
   2.1856985e-002,  1.5861533e-002,  3.5290183e-003, -1.2410228e-002,
  -2.7626856e-002, -3.7110779e-002, -3.6373192e-002, -2.2636839e-002,
   4.2908112e-003,  4.1694130e-002,  8.4300390e-002,  1.2524819e-001,
   1.5747634e-001,  1.7521089e-001,  1.7521089e-001,  1.5747634e-001,
   1.2524819e-001,  8.4300390e-002,  4.1694130e-002,  4.2908112e-003,
  -2.2636839e-002, -3.6373192e-002, -3.7110779e-002, -2.7626856e-002,
  -1.2410228e-002,  3.5290183e-003,  1.5861533e-002,  2.1856985e-002,
   2.0830759e-002,  1.4045689e-002,  4.1345535e-003, -5.7528791e-003,
  -1.2851233e-002, -1.5477694e-002, -1.3374831e-002, -7.6318496e-003,
  -2.4963813e-004,  6.5029357e-003,  1.0749117e-002,  1.1496673e-002,
   8.8395771e-003,  3.8359148e-003, -1.8716291e-003, -6.5727215e-003,
  -8.9839454e-003, -8.5852100e-003, -5.7081531e-003, -1.3758811e-003,
   3.0401048e-003,  6.2456991e-003,  7.3934679e-003,  6.2914520e-003,
   3.4216252e-003, -2.5518617e-004, -3.6061326e-003, -5.6723209e-003,
  -5.9341275e-003, -4.4346588e-003, -1.7300497e-003,  1.3067957e-003,
   3.7617884e-003,  4.9505709e-003,  4.6052167e-003,  2.9271396e-003,
   4.9524537e-004, -1.9278325e-003, -3.6297715e-003, -4.1536761e-003,
  -3.4199645e-003, -1.7268243e-003,  3.6813172e-004,  2.2236277e-003,
   3.3033060e-003,  3.3437559e-003,  2.3945436e-003,  8.0099037e-004,
  -9.2714442e-004, -2.2710648e-003, -2.8592992e-003, -2.5669975e-003,
  -1.5367705e-003, -1.2011956e-004,  1.2396650e-003,  2.1445197e-003,
   2.3570369e-003,  1.8604129e-003,  8.4987528e-004, -3.4125872e-004,
  -1.3516945e-003, -1.8989544e-003, -1.8512086e-003, -1.2564374e-003,
  -3.3234027e-004,  6.1463451e-004,  1.3261571e-003,  1.5878965e-003,
   1.3676808e-003,  7.5974889e-004, -2.7603477e-005, -7.5084278e-004,
  -1.2036169e-003, -1.2752906e-003, -9.7642612e-004, -4.2544221e-004,
   1.9507372e-004,  6.9692728e-004,  9.4153199e-004,  8.7524507e-004,
   5.3403711e-004,  1.9503208e-005, -5.4471089e-004, -1.0625298e-003,
  -1.5051885e-003, -1.9313679e-003, -2.4838233e-003,  3.5742351e-003 } ;

  public AntiAliasFilter() {
  }

  public int getFilterTaps() {
    return a.length;
  }

  float[] filter(float[] ip) {
    int taps = a.length;
    int nSamples = ip.length;
    float[] x = new float[taps];
    float[] op = new float[nSamples];
    float y;
    for (int k=1; k<taps; k++)
      x[k] = 0.0f;
    for (int i=0; i<nSamples; i++) {
      x[0] = ip[i];
      y = 0.0f;
      for (int k=0; k<taps; k++)
        y += a[k]*x[k];
      op[i] = y;
      for(int k=taps-1; k>0; k--)
        x[k] = x[k-1];
    }
    return op;
  }

}